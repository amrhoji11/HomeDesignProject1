// <auto-generated />
using System;
using Landing.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Landing.DAL.Migrations
{
    [DbContext(typeof(ApplecationDbContext))]
    [Migration("20241208073126_UpdateSocial")]
    partial class UpdateSocial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Landing.DAL.Models.ApplecationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "54abbe7a-2e1b-408a-afc9-c556e690c8ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7108f27-1706-4a7d-baf4-7bbabcdd26f6",
                            Email = "admin@design.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DESIGN.COM",
                            NormalizedUserName = "ADMIN@DESIGN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAg4taZGxCHver/zAZu6Z3wu/peHOJMEIwnKPvISYZkh2xWfc/NKu+sAGLFtvja2Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b02075df-ef17-494a-9e01-17548616ee37",
                            TwoFactorEnabled = false,
                            UserName = "admin@design.com"
                        },
                        new
                        {
                            Id = "fc331c45-3199-4997-9c3f-3840dd1b04da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b6b3071-8c89-4544-97fd-9eb6ec10a192",
                            Email = "superadmin@design.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@DESIGN.COM",
                            NormalizedUserName = "SUPERADMIN@DESIGN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEORcwZhe/dZ0cAM3HlK94Z2se+1vTMyObFg/cNmZG2PtChGmyIVlCA4MagNULp1pjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5c9c166-4386-450c-8811-0a693dda2987",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@design.com"
                        },
                        new
                        {
                            Id = "26822e1d-611a-422f-89cc-cdab837166d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42bbc8d1-00f8-49b4-bc69-5a3047b401e6",
                            Email = "user@design.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@DESIGN.COM",
                            NormalizedUserName = "USER@DESIGN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH2tta7pfVy9HcgRidiV3qyhYdDCUEn9YqvKCOcLGNYYZzmZZjv48KmEtoxRDZ0myA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c5cacf4-c871-44bb-b6ee-5561ef4299da",
                            TwoFactorEnabled = false,
                            UserName = "user@design.com"
                        });
                });

            modelBuilder.Entity("Landing.DAL.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasFilter("[ItemId] IS NOT NULL");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("Landing.DAL.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Landing.DAL.Models.Design", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlaticonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlaticonId");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("Landing.DAL.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("Landing.DAL.Models.Flaticon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("flaticons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "kitchen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "living-room"
                        },
                        new
                        {
                            Id = 3,
                            Name = "bathroom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "garden"
                        },
                        new
                        {
                            Id = 5,
                            Name = "office"
                        },
                        new
                        {
                            Id = 6,
                            Name = "dining-room"
                        },
                        new
                        {
                            Id = 7,
                            Name = "balcony"
                        });
                });

            modelBuilder.Entity("Landing.DAL.Models.HomeLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomeLabels");
                });

            modelBuilder.Entity("Landing.DAL.Models.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("Landing.DAL.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DesignId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Landing.DAL.Models.Massage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.Property<string>("YourMassage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.ToTable("massages");
                });

            modelBuilder.Entity("Landing.DAL.Models.PProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplecationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplecationUserId")
                        .IsUnique()
                        .HasFilter("[ApplecationUserId] IS NOT NULL");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Landing.DAL.Models.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplecationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.Property<string>("SocialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplecationUserId");

                    b.HasIndex("PProfileId");

                    b.ToTable("socials");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f8ed6a87-6654-4cec-b1e6-293282923a25",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "94e4b52d-539b-4a98-981f-0a2d3d8e4c57",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "ffa9927f-33cb-41c0-b5f1-214aa4cfddfb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "54abbe7a-2e1b-408a-afc9-c556e690c8ae",
                            RoleId = "f8ed6a87-6654-4cec-b1e6-293282923a25"
                        },
                        new
                        {
                            UserId = "fc331c45-3199-4997-9c3f-3840dd1b04da",
                            RoleId = "94e4b52d-539b-4a98-981f-0a2d3d8e4c57"
                        },
                        new
                        {
                            UserId = "26822e1d-611a-422f-89cc-cdab837166d0",
                            RoleId = "ffa9927f-33cb-41c0-b5f1-214aa4cfddfb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Landing.DAL.Models.Blog", b =>
                {
                    b.HasOne("Landing.DAL.Models.Item", "Item")
                        .WithOne("Blog")
                        .HasForeignKey("Landing.DAL.Models.Blog", "ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Landing.DAL.Models.Comment", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("PProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Landing.DAL.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentComment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.Design", b =>
                {
                    b.HasOne("Landing.DAL.Models.Flaticon", "Flaticon")
                        .WithMany("Designs")
                        .HasForeignKey("FlaticonId");

                    b.Navigation("Flaticon");
                });

            modelBuilder.Entity("Landing.DAL.Models.Feedback", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.Item", b =>
                {
                    b.HasOne("Landing.DAL.Models.Design", "Design")
                        .WithMany("Items")
                        .HasForeignKey("DesignId");

                    b.Navigation("Design");
                });

            modelBuilder.Entity("Landing.DAL.Models.Massage", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Massages")
                        .HasForeignKey("PProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.PProfile", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", "ApplecationUser")
                        .WithOne("Profile")
                        .HasForeignKey("Landing.DAL.Models.PProfile", "ApplecationUserId");

                    b.Navigation("ApplecationUser");
                });

            modelBuilder.Entity("Landing.DAL.Models.Social", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", "ApplecationUser")
                        .WithMany()
                        .HasForeignKey("ApplecationUserId");

                    b.HasOne("Landing.DAL.Models.PProfile", null)
                        .WithMany("Socials")
                        .HasForeignKey("PProfileId");

                    b.Navigation("ApplecationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Landing.DAL.Models.ApplecationUser", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Landing.DAL.Models.Design", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Landing.DAL.Models.Flaticon", b =>
                {
                    b.Navigation("Designs");
                });

            modelBuilder.Entity("Landing.DAL.Models.Item", b =>
                {
                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Landing.DAL.Models.PProfile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Massages");

                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
