// <auto-generated />
using System;
using Landing.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Landing.DAL.Migrations
{
    [DbContext(typeof(ApplecationDbContext))]
    [Migration("20241207233000_createAllTable")]
    partial class createAllTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Landing.DAL.Models.ApplecationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8fd382a5-658e-45fe-ae9f-11fdfc613b65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58c40389-f7c7-4836-9a7c-dc65d4cfdd5a",
                            Email = "admin@design.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DESIGN.COM",
                            NormalizedUserName = "ADMIN@DESIGN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJgtJR5vlTkqbwe5LjZxC4XJ2JLaRv8FTrxrSaGvRxyTi5z1tIzJaFRKSjzJt0yYgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d20cbd4-1927-4169-aebf-ca0711549a0e",
                            TwoFactorEnabled = false,
                            UserName = "admin@design.com"
                        },
                        new
                        {
                            Id = "ac41ce66-4f19-4580-ac84-bd4ef948e85e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cf36534-0a59-42ff-904e-be7b5c82ca85",
                            Email = "superadmin@design.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@DESIGN.COM",
                            NormalizedUserName = "SUPERADMIN@DESIGN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPEVWbzuoBx1dAW9emWW8XbvlIGY4E2RCa5YMuTHogp52ey7QjW291g8ftIKg+bReQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be6608ff-6f79-4103-8545-6fa9f2051694",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@design.com"
                        },
                        new
                        {
                            Id = "309fe612-9dd3-433d-a57d-a736c425da78",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5098e888-8f9f-4781-ba6b-3490599701a8",
                            Email = "user@design.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@DESIGN.COM",
                            NormalizedUserName = "USER@DESIGN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELT+SR5QZmcktKZWADGODIipIRr4TNN6GawKf7lTty3rt1aEclWXtyGR+srnHsyTdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "117e2be0-0f67-44b8-966d-c57951d81827",
                            TwoFactorEnabled = false,
                            UserName = "user@design.com"
                        });
                });

            modelBuilder.Entity("Landing.DAL.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasFilter("[ItemId] IS NOT NULL");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("Landing.DAL.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Landing.DAL.Models.Design", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlaticonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlaticonId");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("Landing.DAL.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("Landing.DAL.Models.Flaticon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("flaticons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "kitchen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "living-room"
                        },
                        new
                        {
                            Id = 3,
                            Name = "bathroom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "garden"
                        },
                        new
                        {
                            Id = 5,
                            Name = "office"
                        },
                        new
                        {
                            Id = 6,
                            Name = "dining-room"
                        },
                        new
                        {
                            Id = 7,
                            Name = "balcony"
                        });
                });

            modelBuilder.Entity("Landing.DAL.Models.HomeLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomeLabels");
                });

            modelBuilder.Entity("Landing.DAL.Models.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("Landing.DAL.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DesignId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Landing.DAL.Models.Massage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.Property<string>("YourMassage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.ToTable("massages");
                });

            modelBuilder.Entity("Landing.DAL.Models.PProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplecationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplecationUserId")
                        .IsUnique()
                        .HasFilter("[ApplecationUserId] IS NOT NULL");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Landing.DAL.Models.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int?>("PProfileId")
                        .HasColumnType("int");

                    b.Property<string>("SocialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PProfileId");

                    b.ToTable("socials");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8af1bd1c-99e4-452d-bd0d-34b24718a6eb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1194f4b2-ce46-4f72-8434-b416f7c6d1e2",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "b43b4853-2d87-4ccc-8109-918b6a5cccca",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8fd382a5-658e-45fe-ae9f-11fdfc613b65",
                            RoleId = "8af1bd1c-99e4-452d-bd0d-34b24718a6eb"
                        },
                        new
                        {
                            UserId = "ac41ce66-4f19-4580-ac84-bd4ef948e85e",
                            RoleId = "1194f4b2-ce46-4f72-8434-b416f7c6d1e2"
                        },
                        new
                        {
                            UserId = "309fe612-9dd3-433d-a57d-a736c425da78",
                            RoleId = "b43b4853-2d87-4ccc-8109-918b6a5cccca"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Landing.DAL.Models.Blog", b =>
                {
                    b.HasOne("Landing.DAL.Models.Item", "Item")
                        .WithOne("Blog")
                        .HasForeignKey("Landing.DAL.Models.Blog", "ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Landing.DAL.Models.Comment", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("PProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Landing.DAL.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentComment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.Design", b =>
                {
                    b.HasOne("Landing.DAL.Models.Flaticon", "Flaticon")
                        .WithMany("Designs")
                        .HasForeignKey("FlaticonId");

                    b.Navigation("Flaticon");
                });

            modelBuilder.Entity("Landing.DAL.Models.Feedback", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.Item", b =>
                {
                    b.HasOne("Landing.DAL.Models.Design", "Design")
                        .WithMany("Items")
                        .HasForeignKey("DesignId");

                    b.Navigation("Design");
                });

            modelBuilder.Entity("Landing.DAL.Models.Massage", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Massages")
                        .HasForeignKey("PProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.PProfile", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", "ApplecationUser")
                        .WithOne("Profile")
                        .HasForeignKey("Landing.DAL.Models.PProfile", "ApplecationUserId");

                    b.Navigation("ApplecationUser");
                });

            modelBuilder.Entity("Landing.DAL.Models.Social", b =>
                {
                    b.HasOne("Landing.DAL.Models.PProfile", "Profile")
                        .WithMany("Socials")
                        .HasForeignKey("PProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Landing.DAL.Models.ApplecationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Landing.DAL.Models.ApplecationUser", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Landing.DAL.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Landing.DAL.Models.Design", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Landing.DAL.Models.Flaticon", b =>
                {
                    b.Navigation("Designs");
                });

            modelBuilder.Entity("Landing.DAL.Models.Item", b =>
                {
                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Landing.DAL.Models.PProfile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Massages");

                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
